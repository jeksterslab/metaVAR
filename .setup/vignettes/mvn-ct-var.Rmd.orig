---
title: "Multivariate Normal (Continuous-Time Vector Autoregressive Model)"
author: Ivan Jacob Agaloos Pesigan
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Multivariate Normal (Continuous-Time Vector Autoregressive Model)}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.path = "fig-vignettes-mvn-ct-var-",
  fig.cap = "",
  fig.width = 11,
  fig.height = 8,
  fig.retina = 2,
  dpi = 300,
  comment = "#>"
)
```

```{r}
#| echo = FALSE
set.seed(42)
n <- 100
time <- 100
delta_t <- 0.10
k <- p <- 3
iden <- diag(k)
null_vec <- rep(x = 0, times = k)
mu0 <- list(
  null_vec
)
sigma0 <- 0.01 * diag(p)
sigma0_l <- list(
  t(chol(sigma0))
)
mu <- list(
  null_vec
)
sigma <- 0.1 * iden
sigma_l <- list(
  t(chol(sigma))
)
nu <- list(
  null_vec
)
lambda <- list(
  iden
)
theta <- 0.2 * iden
theta_l <- list(
  t(chol(theta))
)
```

```{r}
#| echo = FALSE
library(simStateSpace)
phi_mu <- matrix(
  data = c(
    -0.357,
    0.771,
    -0.450,
    0.0,
    -0.511,
    0.729,
    0,
    0,
    -0.693
  ),
  nrow = k
)
phi_sigma <- 0.01 * diag(p * p)
phi <- SimPhiN(
  n = n,
  phi = phi_mu,
  vcov_phi_vec_l = t(chol(phi_sigma))
)
```

## Model

The measurement model is given by
\begin{equation}
  \mathbf{y}_{i, t}
  =
  \boldsymbol{\nu}
  +
  \boldsymbol{\Lambda}
  \boldsymbol{\eta}_{i, t}
  +
  \boldsymbol{\varepsilon}_{i, t},
  \quad
  \mathrm{with}
  \quad
  \boldsymbol{\varepsilon}_{i, t}
  \sim
  \mathcal{N}
  \left(
  \mathbf{0},
  \boldsymbol{\Theta}
  \right)
\end{equation}
where
$\mathbf{y}_{i, t}$,
$\boldsymbol{\eta}_{i, t}$,
and
$\boldsymbol{\varepsilon}_{i, t}$
are random variables
and
$\boldsymbol{\nu}$,
$\boldsymbol{\Lambda}$,
and
$\boldsymbol{\Theta}$
are model parameters.
$\mathbf{y}_{i, t}$
represents a vector of observed random variables,
$\boldsymbol{\eta}_{i, t}$
a vector of latent random variables,
and
$\boldsymbol{\varepsilon}_{i, t}$
a vector of random measurement errors,
at time $t$ and individual $i$.
$\boldsymbol{\nu}$
denotes a vector of intercepts,
$\boldsymbol{\Lambda}$
a matrix of factor loadings,
and
$\boldsymbol{\Theta}$
the covariance matrix of
$\boldsymbol{\varepsilon}$.

An alternative representation of the measurement error
is given by
\begin{equation}
  \boldsymbol{\varepsilon}_{i, t}
  =
  \boldsymbol{\Theta}^{\frac{1}{2}}
  \mathbf{z}_{i, t},
  \quad
  \mathrm{with}
  \quad
  \mathbf{z}_{i, t}
  \sim
  \mathcal{N}
  \left(
  \mathbf{0},
  \mathbf{I}
  \right)
\end{equation}
where
$\mathbf{z}_{i, t}$ is a vector of
independent standard normal random variables and
$\left( \boldsymbol{\Theta}^{\frac{1}{2}} \right) \left( \boldsymbol{\Theta}^{\frac{1}{2}} \right)^{\prime} = \boldsymbol{\Theta}$ .

The dynamic structure is given by
\begin{equation}
  \mathrm{d} \boldsymbol{\eta}_{i, t}
  =
  \boldsymbol{\Phi}
  \left(
  \boldsymbol{\eta}_{i, t}
  -
  \boldsymbol{\mu}
  \right)
  \mathrm{d}t
  +
  \boldsymbol{\Sigma}^{\frac{1}{2}}
  \mathrm{d}
  \mathbf{W}_{i, t}
\end{equation}
where
$\boldsymbol{\mu}$
is the long-term mean or equilibrium level,
$\boldsymbol{\Phi}$
is the rate of mean reversion,
determining how quickly the variable returns to its mean,
$\boldsymbol{\Sigma}$
is the matrix of volatility
or randomness in the process, and
$\mathrm{d}\boldsymbol{W}$
is a Wiener process or Brownian motion,
which represents random fluctuations.

## Data Generation

### Notation

Let $t = `r time`$ be the number of time points and $n = `r n`$ be the number of individuals.

Let the measurement model intecept vector $\boldsymbol{\nu}$ be given by

\begin{equation}
\boldsymbol{\nu}
=
\left(
\begin{array}{c}
  `r nu[[1]][1]` \\
  `r nu[[1]][2]` \\
  `r nu[[1]][3]` \\
\end{array}
\right) .
\end{equation}

Let the factor loadings matrix $\boldsymbol{\Lambda}$ be given by

\begin{equation}
\boldsymbol{\Lambda}
=
\left(
\begin{array}{ccc}
  `r lambda[[1]][1, 1]` & `r lambda[[1]][1, 2]` & `r lambda[[1]][1, 3]` \\
  `r lambda[[1]][2, 1]` & `r lambda[[1]][2, 2]` & `r lambda[[1]][2, 3]` \\
  `r lambda[[1]][3, 1]` & `r lambda[[1]][3, 2]` & `r lambda[[1]][3, 3]` \\
\end{array}
\right) .
\end{equation}

Let the measurement error covariance matrix $\boldsymbol{\Theta}$ be given by

\begin{equation}
\boldsymbol{\Theta}
=
\left(
\begin{array}{ccc}
  `r theta[1, 1]` & `r theta[1, 2]` & `r theta[1, 3]` \\
  `r theta[2, 1]` & `r theta[2, 2]` & `r theta[2, 3]` \\
  `r theta[3, 1]` & `r theta[3, 2]` & `r theta[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let the initial condition
$\boldsymbol{\eta}_{0}$
be given by

\begin{equation}
\boldsymbol{\eta}_{0} \sim \mathcal{N} \left( \boldsymbol{\mu}_{\boldsymbol{\eta} \mid 0}, \boldsymbol{\Sigma}_{\boldsymbol{\eta} \mid 0} \right)
\end{equation}

\begin{equation}
\boldsymbol{\mu}_{\boldsymbol{\eta} \mid 0}
=
\left(
\begin{array}{c}
  `r mu0[[1]][1]` \\
  `r mu0[[1]][2]` \\
  `r mu0[[1]][3]` \\
\end{array}
\right)
\end{equation}

\begin{equation}
\boldsymbol{\Sigma}_{\boldsymbol{\eta} \mid 0}
=
\left(
\begin{array}{ccc}
  `r sigma0[1, 1]` & `r sigma0[1, 2]` & `r sigma0[1, 3]` \\
  `r sigma0[2, 1]` & `r sigma0[2, 2]` & `r sigma0[2, 3]` \\
  `r sigma0[3, 1]` & `r sigma0[3, 2]` & `r sigma0[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let the long-term mean vector $\boldsymbol{\mu}$ be given by

\begin{equation}
\boldsymbol{\mu}
=
\left(
\begin{array}{c}
  `r mu[[1]][1]` \\
  `r mu[[1]][2]` \\
  `r mu[[1]][3]` \\
\end{array}
\right) .
\end{equation}

Let the drift matrix $\boldsymbol{\Phi}$ be normally distributed with the following means

\begin{equation}
\left(
\begin{array}{ccc}
  `r phi_mu[1, 1]` & `r phi_mu[1, 2]` & `r phi_mu[1, 3]` \\
  `r phi_mu[2, 1]` & `r phi_mu[2, 2]` & `r phi_mu[2, 3]` \\
  `r phi_mu[3, 1]` & `r phi_mu[3, 2]` & `r phi_mu[3, 3]` \\
\end{array}
\right)
\end{equation}

and covariance matrix

\begin{equation}
\left(
\begin{array}{ccc}
  `r phi_sigma[1, 1]` & `r phi_sigma[1, 2]` & `r phi_sigma[1, 3]` & `r phi_sigma[1, 4]` & `r phi_sigma[1, 5]` & `r phi_sigma[1, 6]` & `r phi_sigma[1, 7]` & `r phi_sigma[1, 8]` & `r phi_sigma[1, 9]` \\
  `r phi_sigma[2, 1]` & `r phi_sigma[2, 2]` & `r phi_sigma[2, 3]` & `r phi_sigma[2, 4]` & `r phi_sigma[2, 5]` & `r phi_sigma[2, 6]` & `r phi_sigma[2, 7]` & `r phi_sigma[2, 8]` & `r phi_sigma[2, 9]` \\
  `r phi_sigma[3, 1]` & `r phi_sigma[3, 2]` & `r phi_sigma[3, 3]` & `r phi_sigma[3, 4]` & `r phi_sigma[3, 5]` & `r phi_sigma[3, 6]` & `r phi_sigma[3, 7]` & `r phi_sigma[3, 8]` & `r phi_sigma[3, 9]` \\
  `r phi_sigma[4, 1]` & `r phi_sigma[4, 2]` & `r phi_sigma[4, 3]` & `r phi_sigma[4, 4]` & `r phi_sigma[4, 5]` & `r phi_sigma[4, 6]` & `r phi_sigma[4, 7]` & `r phi_sigma[4, 8]` & `r phi_sigma[4, 9]` \\
  `r phi_sigma[5, 1]` & `r phi_sigma[5, 2]` & `r phi_sigma[5, 3]` & `r phi_sigma[5, 4]` & `r phi_sigma[5, 5]` & `r phi_sigma[5, 6]` & `r phi_sigma[5, 7]` & `r phi_sigma[5, 8]` & `r phi_sigma[5, 9]` \\
  `r phi_sigma[6, 1]` & `r phi_sigma[6, 2]` & `r phi_sigma[6, 3]` & `r phi_sigma[6, 4]` & `r phi_sigma[6, 5]` & `r phi_sigma[6, 6]` & `r phi_sigma[6, 7]` & `r phi_sigma[6, 8]` & `r phi_sigma[6, 9]` \\
  `r phi_sigma[7, 1]` & `r phi_sigma[7, 2]` & `r phi_sigma[7, 3]` & `r phi_sigma[7, 4]` & `r phi_sigma[7, 5]` & `r phi_sigma[7, 6]` & `r phi_sigma[7, 7]` & `r phi_sigma[7, 8]` & `r phi_sigma[7, 9]` \\
  `r phi_sigma[8, 1]` & `r phi_sigma[8, 2]` & `r phi_sigma[8, 3]` & `r phi_sigma[8, 4]` & `r phi_sigma[8, 5]` & `r phi_sigma[8, 6]` & `r phi_sigma[8, 7]` & `r phi_sigma[8, 8]` & `r phi_sigma[8, 9]` \\
  `r phi_sigma[9, 1]` & `r phi_sigma[9, 2]` & `r phi_sigma[9, 3]` & `r phi_sigma[9, 4]` & `r phi_sigma[9, 5]` & `r phi_sigma[9, 6]` & `r phi_sigma[9, 7]` & `r phi_sigma[9, 8]` & `r phi_sigma[9, 9]` \\
\end{array}
\right) .
\end{equation}

> **_NOTE:_**  This example depends on the development version of simStateSpace (1.2.1.9000).

The SimPhiN function from the simStateSpace package generates random drift matrices from the multivariate normal distribution. Note that the function generates drift matrices that are stable.

Let the dynamic process noise covariance matrix $\boldsymbol{\Sigma}$ be given by

\begin{equation}
\boldsymbol{\Sigma}
=
\left(
\begin{array}{ccc}
  `r sigma[1, 1]` & `r sigma[1, 2]` & `r sigma[1, 3]` \\
  `r sigma[2, 1]` & `r sigma[2, 2]` & `r sigma[2, 3]` \\
  `r sigma[3, 1]` & `r sigma[3, 2]` & `r sigma[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let $\Delta t = `r delta_t`$.

### R Function Arguments

```{r}
n
time
delta_t
mu0
sigma0
sigma0_l
mu
# first phi in the list of length n
phi[[1]]
sigma
sigma_l
nu
lambda
theta
theta_l
```

### Visualizing the Dynamics Without Process Noise (n = 5 with Different Initial Condition)

```{r no-error}
#| echo = FALSE
library(simStateSpace)
sim <- SimSSMOUIVary(
  n = 5,
  time = length(seq(from = 0, to = 20, by = delta_t)),
  delta_t = delta_t,
  mu0 = mu0,
  sigma0_l = sigma0_l,
  mu = mu,
  phi = phi,
  sigma_l = list(
    matrix(
      data = 0,
      nrow = p,
      ncol = p
    )
  ),
  nu = nu,
  lambda = lambda,
  theta_l = list(
    matrix(
      data = 0,
      nrow = k,
      ncol = k
    )
  )
)
plot(sim, type = "l")
```

### Using the SimSSMVARIVary Function from the simStateSpace Package to Simulate Data

```{r error}
library(simStateSpace)
sim <- SimSSMOUIVary(
  n = n,
  time = time,
  delta_t = delta_t,
  mu0 = mu0,
  sigma0_l = sigma0_l,
  mu = mu,
  phi = phi,
  sigma_l = sigma_l,
  nu = nu,
  lambda = lambda,
  theta_l = theta_l
)
data <- as.data.frame(sim)
head(data)
plot(sim)
```

## Model Fitting

The FitCTVAR function fits a CT-VAR model on each individual $i$.


```{r}
#| include = FALSE
library(metaVAR)
```

```{r}
library(metaVAR)
fit <- FitCTVAR(
  data = data,
  observed = paste0("y", seq_len(k)),
  id = "id",
  time = "time",
  ncores = parallel::detectCores()
)
```

## Multivariate Meta-Analysis

The Meta function performs multivariate meta-analysis using the estimated drift matrices $\boldsymbol{\Phi}$
and the corresponding sampling variance-covariance matrix for each individual $i$.

```{r}
meta <- Meta(
  fit,
  ncores = parallel::detectCores()
)
summary(meta)
```
