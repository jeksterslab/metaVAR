---
title: "Multivariate Meta-Analysis of Discrete-Time VAR Estimates (Random-Effects Model)"
author: Ivan Jacob Agaloos Pesigan
date: "`r Sys.Date()`"
bibliography: "vignettes.bib"
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
nocite: |
  @Cheung-2015
  @RCoreTeam-2024
  @Neale-Hunter-Pritikin-etal-2015
  @Hunter-2017
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Multivariate Meta-Analysis of Discrete-Time VAR Estimates (Random-Effects Model)}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.path = "fig-vignettes-fit-dt-var-id-mx-random-",
  fig.cap = "",
  fig.width = 11,
  fig.height = 8,
  fig.retina = 2,
  dpi = 300,
  comment = "#>"
)
```

```{r}
#| echo = FALSE
options(scipen = 999)
set.seed(42)
n <- 50 # n <- 1000
time <- 500 # time <- 1000
k <- p <- 2
iden <- diag(k)
null_vec <- rep(x = 0, times = k)
nu <- list(
  null_vec
)
lambda <- list(
  iden
)
theta <- 0.2 * iden
theta_l <- list(
  t(chol(theta))
)
alpha <- c(
  2.87,
  2.04
)
psi_d <- sqrt(
  c(1.3, 1.56)
) * iden
psi_r <- matrix(
  data = c(1, 0.4, 0.4, 1),
  nrow = p
)
psi <- psi_d %*% psi_r %*% psi_d
psi[upper.tri(psi)] <- t(psi)[upper.tri(psi)]
psi_l <- list(
  t(chol(psi))
)
beta <- matrix(
  data = c(
    0.28, -0.035,
    -0.048, 0.26
  ),
  nrow = p
)
mu0 <- list(
  simStateSpace::SSMMeanEta(
    beta = beta,
    alpha = alpha
  )
)
sigma0 <- list(
  simStateSpace::SSMCovEta(
    beta = beta,
    psi = psi
  )
)
sigma0_l <- list(
  t(chol(sigma0[[1]]))
)
```

```{r}
#| echo = FALSE
library(simStateSpace)
beta_mu <- beta
beta_d <- sqrt(
  c(
    0.0169,
    0.00810,
    0.000784,
    0.0256
  )
) * diag(p * p)
beta_r <- matrix(
  data = c(
    1, 0.4, 0.4, 0.4,
    0.4, 1, 0.4, 0.4,
    0.4, 0.4, 1, 0.4,
    0.4, 0.4, 0.4, 1
  ),
  nrow = p * p
)
beta_sigma <- beta_d %*% beta_r %*% beta_d
beta_sigma[upper.tri(beta_sigma)] <- t(beta_sigma)[upper.tri(beta_sigma)]
beta_sigma_l <- t(chol(beta_sigma))
beta <- SimBetaN(
  n = n,
  beta = beta_mu,
  vcov_beta_vec_l = beta_sigma_l
)
alpha_mu <- alpha
alpha_d <- sqrt(
  c(
    1.2,
    1.1
  )
) * diag(p)
alpha_r <- matrix(
  data = c(
    1, 0.4,
    0.4, 1
  ),
  nrow = p
)
alpha_sigma <- alpha_d %*% alpha_r %*% alpha_d
alpha_sigma[upper.tri(alpha_sigma)] <- t(alpha_sigma)[upper.tri(alpha_sigma)]
alpha_sigma_l <- t(chol(alpha_sigma))
alpha <- SimAlphaN(
  n = n,
  alpha = alpha_mu,
  vcov_alpha_l = alpha_sigma_l
)
```

> **Note:** When the discrete-time vector autoregressive model is estimated separately for each ID,
> any of the parameters can vary across individuals.
> In this example, however, we are only varying $\boldsymbol{\alpha}$ and $\boldsymbol{\beta}$.

## Model

The measurement model is given by
\begin{equation}
  \mathbf{y}_{i, t}
  =
  \boldsymbol{\Lambda}
  \boldsymbol{\eta}_{i, t}
  +
  \boldsymbol{\varepsilon}_{i, t},
  \quad
  \mathrm{with}
  \quad
  \boldsymbol{\varepsilon}_{i, t}
  \sim
  \mathcal{N}
  \left(
  \mathbf{0},
  \boldsymbol{\Theta}
  \right)
\end{equation}
where
$\mathbf{y}_{i, t}$,
$\boldsymbol{\eta}_{i, t}$,
and
$\boldsymbol{\varepsilon}_{i, t}$
are random variables
and
$\boldsymbol{\Lambda}$,
and
$\boldsymbol{\Theta}$
are model parameters.
$\mathbf{y}_{i, t}$
represents a vector of observed random variables,
$\boldsymbol{\eta}_{i, t}$
a vector of latent random variables,
and
$\boldsymbol{\varepsilon}_{i, t}$
a vector of random measurement errors,
at time $t$ and individual $i$.
$\boldsymbol{\Lambda}$
denotes a matrix of factor loadings,
and
$\boldsymbol{\Theta}$
the covariance matrix of
$\boldsymbol{\varepsilon}$.
In this model,
$\boldsymbol{\Lambda}$ is an identity matrix and
$\boldsymbol{\Theta}$ is a diagonal matrix.

The dynamic structure is given by
\begin{equation}
  \boldsymbol{\eta}_{i, t}
  =
  \boldsymbol{\alpha}_{i}
  +
  \boldsymbol{\beta}_{i}
  \boldsymbol{\eta}_{i, t - 1}
  +
  \boldsymbol{\zeta}_{i, t},
  \quad
  \mathrm{with}
  \quad
  \boldsymbol{\zeta}_{i, t}
  \sim
  \mathcal{N}
  \left(
  \mathbf{0},
  \boldsymbol{\Psi}
  \right)
\end{equation}
where
$\boldsymbol{\eta}_{i, t}$,
$\boldsymbol{\eta}_{i, t - 1}$,
and
$\boldsymbol{\zeta}_{i, t}$
are random variables,
and
$\boldsymbol{\alpha}_{i}$,
$\boldsymbol{\beta}_{i}$,
and
$\boldsymbol{\Psi}$
are model parameters.
Here,
$\boldsymbol{\eta}_{i, t}$
is a vector of latent variables
at time $t$ and individual $i$,
$\boldsymbol{\eta}_{i, t - 1}$
represents a vector of latent variables
at time $t - 1$ and individual $i$,
and
$\boldsymbol{\zeta}_{i, t}$
represents a vector of dynamic noise
at time $t$ and individual $i$.
$\boldsymbol{\alpha}_{i}$
denotes a vector of intercepts
for individual $i$,
$\boldsymbol{\beta}_{i}$
a matrix of autoregression
and cross regression coefficients
for individual $i$,
and
$\boldsymbol{\Psi}$
the covariance matrix of
$\boldsymbol{\zeta}_{i, t}$.
In this model,
$\boldsymbol{\Psi}$ is a symmetric matrix.

## Data Generation

The parameters used in this example were based on @Bringmann-Vissers-Wichers-etal-2013.

### Notation

Let $t = `r time`$ be the number of time points and $n = `r n`$ be the number of individuals.

Let the measurement model intecept vector $\boldsymbol{\nu}$ be given by

\begin{equation}
\boldsymbol{\nu}
=
\left(
\begin{array}{c}
  `r nu[[1]][1]` \\
  `r nu[[1]][2]` \\
\end{array}
\right) .
\end{equation}

Let the factor loadings matrix $\boldsymbol{\Lambda}$ be given by

\begin{equation}
\boldsymbol{\Lambda}
=
\left(
\begin{array}{cc}
  `r lambda[[1]][1, 1]` & `r lambda[[1]][1, 2]` \\
  `r lambda[[1]][2, 1]` & `r lambda[[1]][2, 2]` \\
\end{array}
\right) .
\end{equation}

Let the measurement error covariance matrix $\boldsymbol{\Theta}$ be given by

\begin{equation}
\boldsymbol{\Theta}
=
\left(
\begin{array}{cc}
  `r theta[1, 1]` & `r theta[1, 2]` \\
  `r theta[2, 1]` & `r theta[2, 2]` \\
\end{array}
\right) .
\end{equation}

Let the initial condition
$\boldsymbol{\eta}_{0}$
be given by

\begin{equation}
\boldsymbol{\eta}_{0} \sim \mathcal{N} \left( \boldsymbol{\mu}_{\boldsymbol{\eta} \mid 0}, \boldsymbol{\Sigma}_{\boldsymbol{\eta} \mid 0} \right)
\end{equation}

\begin{equation}
\boldsymbol{\mu}_{\boldsymbol{\eta} \mid 0}
=
\left(
\begin{array}{c}
  `r mu0[[1]][1]` \\
  `r mu0[[1]][2]` \\
\end{array}
\right)
\end{equation}

\begin{equation}
\boldsymbol{\Sigma}_{\boldsymbol{\eta} \mid 0}
=
\left(
\begin{array}{cc}
  `r sigma0[[1]][1, 1]` & `r sigma0[[1]][1, 2]` \\
  `r sigma0[[1]][2, 1]` & `r sigma0[[1]][2, 2]` \\
\end{array}
\right) .
\end{equation}

Let the intercept vector $\boldsymbol{\alpha}$ be normally distributed with the following means

\begin{equation}
\left(
\begin{array}{c}
  `r alpha_mu[1]` \\
  `r alpha_mu[2]` \\
\end{array}
\right)
\end{equation}

and covariance matrix

\begin{equation}
\left(
\begin{array}{cc}
  `r alpha_sigma[1, 1]` & `r alpha_sigma[1, 2]` \\
  `r alpha_sigma[2, 1]` & `r alpha_sigma[2, 2]` \\
\end{array}
\right) .
\end{equation}

Let the transition matrix $\boldsymbol{\beta}$ be normally distributed with the following means

\begin{equation}
\left(
\begin{array}{cc}
  `r beta_mu[1, 1]` & `r beta_mu[1, 2]` \\
  `r beta_mu[2, 1]` & `r beta_mu[2, 2]` \\
\end{array}
\right)
\end{equation}

and covariance matrix

\begin{equation}
\left(
\begin{array}{cccc}
  `r beta_sigma[1, 1]` & `r beta_sigma[1, 2]` & `r beta_sigma[1, 3]` & `r beta_sigma[1, 4]` \\
  `r beta_sigma[2, 1]` & `r beta_sigma[2, 2]` & `r beta_sigma[2, 3]` & `r beta_sigma[2, 4]` \\
  `r beta_sigma[3, 1]` & `r beta_sigma[3, 2]` & `r beta_sigma[3, 3]` & `r beta_sigma[3, 4]` \\
  `r beta_sigma[4, 1]` & `r beta_sigma[4, 2]` & `r beta_sigma[4, 3]` & `r beta_sigma[4, 4]` \\
\end{array}
\right) .
\end{equation}

The `SimAlphaN` and `SimBetaN` functions from the `simStateSpace` package generates random intercept vectors and transition matrices from the multivariate normal distribution. Note that the `SimBetaN` function generates transition matrices that are weakly stationary.

Let the dynamic process noise $\boldsymbol{\Psi}$ be given by

\begin{equation}
\boldsymbol{\Psi}
=
\left(
\begin{array}{cc}
  `r psi[1, 1]` & `r psi[1, 2]` \\
  `r psi[2, 1]` & `r psi[2, 2]` \\
\end{array}
\right) .
\end{equation}

```{r}
#| echo = FALSE
options(scipen = 0)
```

### R Function Arguments

```{r}
n
time
mu0
sigma0
sigma0_l # sigma0_l <- t(chol(sigma0))
# first alpha in the list of length n
alpha[[1]]
# first beta in the list of length n
beta[[1]]
psi
psi_l # psi_l <- t(chol(psi))
nu
lambda
theta
```

### Visualizing the Dynamics Without Process Noise (n = 5 with Different Initial Condition)

```{r no-error}
#| echo = FALSE
library(simStateSpace)
sim <- SimSSMIVary(
  n = 5,
  time = 50,
  mu0 = mu0,
  sigma0_l = sigma0_l,
  alpha = alpha,
  beta = beta,
  psi_l = list(
    matrix(
      data = 0,
      nrow = k,
      ncol = k
    )
  ),
  nu = nu,
  lambda = lambda,
  theta_l = theta_l
)
plot(sim, type = "l")
```

### Using the `SimSSMIVary` Function from the `simStateSpace` Package to Simulate Data

```{r error}
library(simStateSpace)
sim <- SimSSMIVary(
  n = n,
  time = time,
  mu0 = mu0,
  sigma0_l = sigma0_l,
  alpha = alpha,
  beta = beta,
  psi_l = psi_l,
  nu = nu,
  lambda = lambda,
  theta_l = theta_l
)
data <- as.data.frame(sim)
head(data)
plot(sim)
```

## Model Fitting

The `FitDTVARIDMx` function fits a DT-VAR model on each individual $i$.

```{r}
#| include = FALSE
library(fitDTVARMx)
```

```{r}
library(fitDTVARMx)
fit <- FitDTVARIDMx(
  data = data,
  observed = paste0("y", seq_len(k)),
  id = "id",
  mu0_values = mu0[[1]],
  sigma0_values = sigma0[[1]],
  ncores = parallel::detectCores()
)
```

## Multivariate Meta-Analysis

The `MetaVARMx` function performs multivariate meta-analysis using the estimated parameters
and the corresponding sampling variance-covariance matrix for each individual $i$.
Estimates with the prefix `b0` correspond to the estimates of `beta_mu` and `alpha_mu`.
Estimates with the prefix `t2` correspond to the estimates of `beta_sigma` and `alpha_sigma`.
Estimates with the prefix `i2` correspond to the estimates of heterogeniety.

```{r}
library(metaVAR)
meta <- MetaVARMx(
  object = fit,
  intercept = TRUE,
  ncores = parallel::detectCores()
)
summary(meta)
```

## References

```{r}
#| include = FALSE
rm(list = ls())
```
